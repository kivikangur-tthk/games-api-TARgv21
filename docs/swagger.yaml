openapi: 3.0.2
info:
    title: TARgv21 Games-API
    version: 1.0.0
    description: '### This is a Swagger UI for our Games API'
paths:
    /games:
        get:
            tags:
                - Games
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                            examples:
                                List of games:
                                    value:
                                        -
                                            id: 1
                                            name: Witcher 3
                                        -
                                            id: 2
                                            name: Minecraft
                                        -
                                            id: 3
                                            name: Disco Elysium
                    description: |
                        Returns a list of games
            summary: Get a list of all games
            description: Returns a list of all games in API
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Game'
                required: true
            tags:
                - Games
            responses:
                '201':
                    headers:
                        location:
                            schema:
                                type: string
                            examples:
                                Location of created game:
                                    value: 'https://server:port/games/{id}'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Game'
                    description: Game was added
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/error'
                            examples:
                                Invalid data:
                                    value:
                                        error: 'Invalid input, missing required parameters'
                    description: Invalid data supplied
            summary: Add new game
            description: |
                Add new game with all the details
    '/games/{id}':
        summary: Get game Details
        description: Get all the details of a game with the given id
        get:
            tags:
                - Games
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                            examples:
                                Full details of a game:
                                    value:
                                        id: 1
                                        name: Disco Elysium
                                        description: Adventure detective game
                                        genre: Adventure
                                        studio: Rockstars
                                        release: 22-02-2012
                    description: Game was found and the details are returned
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/error'
                            examples:
                                Game not found:
                                    value:
                                        error: Game with the given id was not found.
                    description: Game with the given ID does not exist
            summary: Get details of the game with given ID
            description: |
                Return all the details of the game
        put:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Game'
                required: true
            tags:
                - Games
            responses:
                '200':
                    headers:
                        location:
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Game'
                    description: |
                        Game was updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/error'
                    description: Missing required fields
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/error'
                    description: Game not found
            summary: Update Game
        delete:
            tags:
                - Games
            responses:
                '204':
                    description: Game deleted
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/error'
                    description: Game not found
                '500':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/error'
                            examples:
                                ServerError:
                                    value:
                                        error: 'Something went wrong on our side. Sorry :('
                    description: Server messed up
            summary: Remove game
        parameters:
            -
                name: id
                description: Id of the Game to get the details
                schema:
                    type: integer
                in: path
                required: true
    /players:
        summary: Path used to manage the list of players.
        description: >-
            The REST endpoint/path used to list and create zero or more `Player` entities.  This path contains
            a `GET` and `POST` operation to perform the list and create tasks, respectively.
        get:
            tags:
                - Players
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Player'
                    description: Successful response - returns an array of `Player` entities.
            operationId: getPlayers
            summary: List All Players
            description: Gets a list of all `Player` entities.
        post:
            requestBody:
                description: A new `Player` to be created.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Player'
                required: true
            tags:
                - Players
            responses:
                '201':
                    description: Successful response.
            operationId: createPlayer
            summary: Create a Player
            description: Creates a new instance of a `Player`.
    '/players/{playerId}':
        summary: Path used to manage a single Player.
        description: >-
            The REST endpoint/path used to get, update, and delete single instances of an `Player`.  This path
            contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks,
            respectively.
        get:
            tags:
                - Players
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Player'
                    description: Successful response - returns a single `Player`.
            operationId: getPlayer
            summary: Get a Player
            description: Gets the details of a single instance of a `Player`.
        put:
            requestBody:
                description: Updated `Player` information.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Player'
                required: true
            tags:
                - Players
            responses:
                '202':
                    description: Successful response.
            operationId: updatePlayer
            summary: Update a Player
            description: Updates an existing `Player`.
        delete:
            tags:
                - Players
            responses:
                '204':
                    description: Successful response.
            operationId: deletePlayer
            summary: Delete a Player
            description: Deletes an existing `Player`.
        parameters:
            -
                name: playerId
                description: A unique identifier for a `Player`.
                schema:
                    type: string
                in: path
                required: true
    /gameplays:
        summary: Path used to manage the list of gameplays.
        description: >-
            The REST endpoint/path used to list and create zero or more `GamePlay` entities.  This path
            contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
        get:
            tags:
                - GamePlays
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/GamePlay'
                    description: Successful response - returns an array of `GamePlay` entities.
            operationId: getGamePlays
            summary: List All GamePlays
            description: Gets a list of all `GamePlay` entities.
        post:
            requestBody:
                description: A new `GamePlay` to be created.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GamePlay'
                required: true
            tags:
                - GamePlays
            responses:
                '201':
                    description: Successful response.
            operationId: createGamePlay
            summary: Create a GamePlay
            description: Creates a new instance of a `GamePlay`.
    '/gameplays/{gameplayId}':
        summary: Path used to manage a single GamePlay.
        description: >-
            The REST endpoint/path used to get, update, and delete single instances of an `GamePlay`.  This
            path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete
            tasks, respectively.
        get:
            tags:
                - GamePlays
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GamePlay'
                    description: Successful response - returns a single `GamePlay`.
            operationId: getGamePlay
            summary: Get a GamePlay
            description: Gets the details of a single instance of a `GamePlay`.
        # put:
        #     requestBody:
        #         description: Updated `GamePlay` information.
        #         content:
        #             application/json:
        #                 schema:
        #                     $ref: '#/components/schemas/GamePlay'
        #         required: true
        #     tags:
        #         - GamePlays
        #     responses:
        #         '202':
        #             description: Successful response.
        #     operationId: updateGamePlay
        #     summary: Update a GamePlay
        #     description: Updates an existing `GamePlay`.
        delete:
            tags:
                - GamePlays
            responses:
                '204':
                    description: Successful response.
            operationId: deleteGamePlay
            summary: Delete a GamePlay
            description: Deletes an existing `GamePlay`.
        parameters:
            -
                name: gameplayId
                description: A unique identifier for a `GamePlay`.
                schema:
                    type: string
                in: path
                required: true
components:
    schemas:
        error:
            title: Root Type for error
            description: ''
            type: object
            properties:
                error:
                    type: string
            example:
                error: Error message.
        Game:
            title: Root Type for Game
            description: Game details
            required:
                - release
                - name
                - genre
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                name:
                    type: string
                description:
                    type: string
                genre:
                    type: string
                studio:
                    type: string
                release:
                    format: date
                    type: string
            example:
                id: 1
                name: Minecraft
                description: 'Mining simulator :)'
                genre: Simulator
                studio: Mojang
                release: '2015-01-31'
        Player:
            title: Root Type for Player
            description: ''
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                firstName:
                    type: string
                lastName:
                    type: string
            example:
                id: 1
                firstName: John
                lastName: Doe
        GamePlay:
            title: Root Type for GamePlay
            description: ''
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                playerId:
                    format: int32
                    type: integer
                gameId:
                    format: int32
                    type: integer
                playTimeMinutes:
                    format: int32
                    type: integer
            example:
                id: 1
                playerId: 1
                gameId: 2
                playTimeMinutes: 60
